{"version":3,"sources":["../index.js"],"names":["MongoClient","require","assert","url","insertDocument","db","callback","collection","insertOne","Date","err","equal","console","log","findRestaurants","find","toArray","doc","dir","JSON","stringify","updateRestaurants","updateOne","$set","$currentDate","results","removeRestaurants","deleteMany","connect","close","process","exit"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Created by Eng Chrispinus on 10/12/2016.\n */\n\n\n/*eslint no-console: [\"error\", { allow: [\"warn\", \"error\", \"log\", \"dir\"] }] */\n/**\n *Initialise the 'MongoClient', 'assert', and the 'url' with the\n * object for the mongodb driver connetion, and assert library.\n */\n\nvar MongoClient = require(\"mongodb\").MongoClient;\nvar assert = require(\"assert\");\nvar url = \"mongodb://localhost:27017/meanstack\";\n\n\n/**\n * build function that takes in the database connection db,\n * and the call back function since the javascript will be\n * running asynchronously.\n * @param db\n * @param callback\n */\n\nlet insertDocument = (db, callback) => {\n    db.collection(\"restaurants\").insertOne({\n        \"address\": {\n            \"street\": \"2 Avenue\",\n            \"zipcode\": \"10075\",\n            \"building\": \"1480\",\n            \"coord\": [-73.9557413, 40.7720266]\n        },\n        \"borough\": \"Manhattan\",\n        \"cuisine\": \"Italian\",\n        \"grades\": [\n            {\n                \"date\": new Date(\"2014-10-01T00:00:00Z\"),\n                \"grade\": \"A\",\n                \"score\": 11\n            },\n            {\n                \"date\": new Date(\"2014-01-16T00:00:00Z\"),\n                \"grade\": \"B\",\n                \"score\": 17\n            }\n        ],\n        \"name\": \"Vella\",\n        \"restaurant_id\": \"41704620\"\n    }, function (err) {\n        assert.equal(err, null);\n        console.log(\"Inserted a document into the restaurants collection.\");\n        console.log(\"Calling the INSERT call back\");\n        callback();\n    });\n};\n\n/**\n * build function that takes in the database connection db,\n * and the call back function since the javascript will be\n * running asynchronously.\n * @param db\n * @param callback\n */\n\n\nvar findRestaurants = function (db, callback) {\n    db.collection(\"restaurants\").find().toArray(function (err, doc) {\n        assert.equal(err, null);\n        if (doc != null) {\n            console.dir(JSON.stringify(doc));\n        } else {\n            console.log(\"Calling the FIND call back \");\n            callback();\n        }\n    });\n};\n\n/**\n * build function that takes in the database connection db,\n * and the call back function since the javascript will be\n * running asynchronously.\n * @param db\n * @param callback\n */\n\n\nvar updateRestaurants = function (db, callback) {\n    db.collection(\"restaurants\").updateOne(\n        {\"name\": \"Vella\", \"grades.grade\": \"B\"},\n        {\n            $set: {\"cuisine\": \"American (New)\", \"grades.$.score\": 20},\n            $currentDate: {\"lastModified\": true}\n        }, function (err, results) {\n            console.log(results);\n            console.log(\"Calling the UPDATE call back \");\n            callback();\n        });\n};\n\n\n/**\n * build function that takes in the database connection db,\n * and the call back function since the javascript will be\n * running asynchronously.\n * @param db\n * @param callback\n */\n\n\nvar removeRestaurants = function (db, callback) {\n    db.collection(\"restaurants\").deleteMany(\n        {\"borough\": \"Manhattan\"},\n        function (err, results) {\n            console.log(results);\n            callback();\n        }\n    );\n};\n\n/**\n * Open a connection to the database and the function above\n * with their callback functions that will close the database\n * connection db each time.\n */\nMongoClient.connect(url, function (err, db) {\n    assert.equal(null, err);\n    if(db != null)\n        console.log(\"DB to database open 1\");\n\n    insertDocument(db, function () {\n        console.log(\"TEST 1\");\n        db.close();\n    });\n\n    console.log(\"Passed 1\");\n\n    findRestaurants(db, function () {\n        db.close();\n    });\n\n\n    console.log(\"Passed 2\");\n    updateRestaurants(db, function () {\n        db.close();\n    });\n\n\n    console.log(\"Passed 3\");\n    findRestaurants(db, function () {\n        db.close();\n    });\n\n\n    console.log(\"Passed 4\");\n    removeRestaurants(db, function () {\n        db.close();\n    });\n\n\n    console.log(\"Passed 5\");\n    findRestaurants(db, function () {\n        db.close();\n    });\n\n    process.exit(0)\n\n});\n"]}