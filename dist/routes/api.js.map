{"version":3,"sources":["../../routes/api.js"],"names":["express","status","bodyParser","api","compute","handleMany","require","module","exports","wagner","Router","use","json","get","invoke","Donor","req","res","find","$and","$gte","params","log","range","$lte","lat","bloodgroup","score","$meta","sort","limit","parseFloat","exec","bind","BloodGroup","_id","a","b","property","error","result","INTERNAL_SERVER_ERROR","toString","NOT_FOUND"],"mappings":"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","file":"api.js","sourcesContent":["//noinspection Eslint\n/**\n * Created by chrisp on 24/08/2016.\n */\n\nlet express, status, bodyParser, api, compute, handleMany;\n\nexpress = require(\"express\");\nstatus = require(\"http-status\");\nbodyParser = require(\"body-parser\");\n\nmodule.exports = (wagner) => {\n\tapi = express.Router();\n\n\tapi.use(bodyParser.json());\n\n\t// api.put(\"/donor/add\", wagner.invoke((Donor)=> {\n\t// \treturn (req, res)=> {\n\t// \t\ttry {\n\t// \t\t\tvar doner = req.body.donor;\n\t// \t\t} catch (e) {\n\t// \t\t\treturn res.status(status.BAD_REQUEST).json({error: \"No cart specified! \"});\n\t// \t\t}\n    //\n\t// \t\treq.body.donor= doner;\n\t// \t\treq.body.donor.save((error, user)=> {\n\t// \t\t\tif (error) return res.status(status.INTERNAL_SERVER_ERROR).json({error: error.toString()});\n\t// \t\t\treturn res.json({user: user});\n\t// \t\t});\n\t// \t};\n\t// }));\n\n\n    // Simple rest api to return the cordinates\n\tapi.get(\"/donor/search/:lat/:log/:limit/:range/:bloodgroup\", wagner.invoke((Donor)=> {\n\t\treturn (req, res)=> {\n\t\t\tDonor.find(\n\t\t\t\t{\n\t\t\t\t\t$and: [\n                        {$and: [{\"location.geoLong\": {$gte :compute (req.params.log ,- req.params.range)}}, {\"location.geoLat\":{$lte :  compute(req.params.log , req.params.range)}}]},\n                        {$and: [{\"location.geoLat\": {$gte : compute(req.params.lat , - req.params.range)}}, {\"location.geoLat\":{$lte :  compute(req.params.lat,  req.params.range)}}]},\n                        {\"bloodGroup.canDonateTo\":req.params.bloodgroup}\n\t\t\t\t\t]\n\t\t\t\t}\n                , {score: {$meta: \"textScore\"}}).sort({score: {$meta: \"textScore\"}}).limit(parseFloat(req.params.limit)).exec(handleMany.bind(null, \"donors\", res));\n\t\t};\n\t}));\n\n\tapi.get(\"/bloodgroup/list\",wagner.invoke((BloodGroup)=>{\n\t\treturn (req,res)=>{\n\t\t\tBloodGroup.find().sort({_id: 1}).exec( handleMany.bind(null, \"bloodgroups\", res));\n\t\t};\n\t}));\n\n\n\treturn api;\n};\n\n// var handleOne = (property, res, error, result)=> {\n//     console.log(result);\n//     console.log(property);\n//     if (error) return res.status(status.INTERNAL_SERVER_ERROR).json({error: error.toString()});\n//     if (!result) return res.status(status.NOT_FOUND).json({error: \"Not found\"});\n//     var json = {};\n//     json[property] = result;\n//     res.json(json);\n// };\n\ncompute= (a,b)=> {return parseFloat(a)+parseFloat(b);};\n\nhandleMany = (property, res, error, result)=> {\n\tif (error) return res.status(status.INTERNAL_SERVER_ERROR).json({error: error.toString()});\n\tif (!result) return res.status(status.NOT_FOUND).json({error: \"Not found\"});\n\tvar json = {};\n\tjson[property] = result;\n\tres.json(json);\n};\n\n"]}